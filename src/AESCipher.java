import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public abstract class AESCipher {
    private static List<int[][]> roundsKeys = new ArrayList<>();
    private static List<int[][]> encryptBlocks = new ArrayList<>();
    private static int[][] multipMatrix = new int[][] {
        {2,3,1,1},
        {1,2,3,1},
        {1,1,2,3},
        {3,1,1,2}
    };
                                                                
    public static byte[] encrypt(byte[] toEncrypt, String key) {
        generateRoundsKeys(key); 
        buildEncryptBlocks(toEncrypt);
        List<int[][]> encryptedBlocks = new ArrayList<>();
        int[][] temp = new int[4][4];
        for(int i = 0; i < encryptBlocks.size(); i++) {
            temp = addRoundKey(encryptBlocks.get(i), roundsKeys.get(0));
            for (int j = 1; j < 10; j++) {
                temp = addRoundKey(mixColumns(shiftRows(subBytes(temp))), roundsKeys.get(j));
            }
            encryptedBlocks.add(addRoundKey(shiftRows(subBytes(temp)), roundsKeys.get(10)));    
        }
        
        int idx = 0;
        byte[] result = new byte[encryptBlocks.size() * 16];
        for (int[][] x : encryptedBlocks) {
            for (int i = 0; i < x.length; i++) {
                for (int j = 0; j < x[i].length; j++) {
                    result[idx++] = (byte) x[i][j];
                }
            }
        }
        
        return result;
    }

    private static int[][] mixColumns(int[][] matrix) {
        int[][] result = new int[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                result[j][i] = getGaloisMultiplication(getW(matrix, i), multipMatrix[j]);
            }
        }
        return result;
    }

    private static int getGaloisMultiplication(int[] r, int[] n) {
        return galoisMultiplication(r[0], n[0]) ^ galoisMultiplication(r[1], n[1]) ^ galoisMultiplication(r[2], n[2]) ^  galoisMultiplication(r[3], n[3]);
    }

    private static int galoisMultiplication(int r, int n) {
        if (r == 0 || n == 0) return 0;
        if (r == 1) return n;
        if (n == 1) return r;

        int sum = L_TABLE[r >> 4][r & ((1 << 4) - 1)] + L_TABLE[n >> 4][n & ((1 << 4) - 1)];
        sum = sum > 0xFF ? sum = sum - 0xFF : sum;
        
        return E_TABLE[sum >> 4][sum & ((1 << 4) - 1)];
    }

    private static List<int[][]> buildEncryptBlocks(byte[] toBuild) {
        if (toBuild.length < 16) {
            encryptBlocks.add(createBlocks(toBuild));
            return encryptBlocks;
        } 
        IntStream.range(0, (toBuild.length / 16)).forEach(x -> encryptBlocks.add(createBlocks(Arrays.copyOfRange(toBuild, x*16, 16*(x+1)))));
        if(toBuild.length % 16 == 0) {  
            encryptBlocks.add(new int[][]{{16, 16, 16, 16},{16, 16, 16, 16},{16, 16, 16, 16},{16, 16, 16, 16}});
            return encryptBlocks;
        } 
        encryptBlocks.add(createBlocks(Arrays.copyOfRange(toBuild, toBuild.length / 16 * 16, toBuild.length)));
        return encryptBlocks;
    }

    private static int[][] createBlocks(byte[] bytes) {
        int[][] stateMatrix = new int[4][4];
        for (int i = 0, idx = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                stateMatrix[j][i] = idx < bytes.length ? bytes[idx++] : 16 - idx;
            }
        }
        return stateMatrix;
    }

    private static int[][] addRoundKey(int[][] block, int[][] roundKey) {
        int[][] result = new int[block.length][block.length];
        for (int i = 0; i < block.length; i++) {
            for (int j = 0; j < block.length; j++) {
                result[j][i] = block[j][i] ^ roundKey[j][i];
            }
        }
        return result;
    }

    private static void generateRoundsKeys(String rawKey) {
        roundsKeys.add(keyExpansion(generateKey(rawKey.split(","))));
        IntStream.range(0, 10).forEach(x -> roundsKeys.add(generateRoundKey(x)));
    }

    private static int[] generateKey(String[] keyToConvert) {
        return Stream.of(keyToConvert).mapToInt(Integer::parseInt).toArray();
    }

    private static int[][] keyExpansion(int[] key) {
        int matrixSize = (int) Math.sqrt(key.length);
        int[][] stateMatrix = new int[matrixSize][matrixSize];
        for (int i = 0, idx = 0; i < matrixSize; i++) {
            for (int j = 0; j < matrixSize; j++) {
                stateMatrix[j][i] = key[idx++];
            }
        }
        return stateMatrix;
    }
    
    private static int[][] generateRoundKey(int roundKeyIdx) {
        int[][] lastRoundKey = roundsKeys.get(roundKeyIdx);
        int[][] newRoundKey = new int[lastRoundKey.length][lastRoundKey.length];
        int[] rotWord = generateRotWord(getW(lastRoundKey, lastRoundKey.length - 1));
        int[] subWord = new int[rotWord.length];
        IntStream.range(0, rotWord.length).forEach(x -> subWord[x] = S_BOX[rotWord[x] >> 4][rotWord[x] & ((1 << 4) - 1)]);
        int idx = 0;
        for(int x : xorWords(getW(lastRoundKey, 0), xorWords(subWord, roundConstant(roundKeyIdx)))) {
            newRoundKey[idx++][0] = x;
        }
        for (int i = 1; i < lastRoundKey.length; i++) {
            idx = 0;
            for(int x : xorWords(getW(lastRoundKey, i), getW(newRoundKey, i-1))) {
                newRoundKey[idx++][i] = x;
            }
        }
        return newRoundKey;
    }

    private static int[] getW(int[][] roundKey, int idx) {
        int[] w = new int[roundKey.length]; 
        for (int i = 0; i < roundKey.length; i++) {
            w[i] = roundKey[i][idx];
        }
        return w;
    }

    private static int[] generateRotWord(int[] lastW) {
        int[] rotWord = Arrays.copyOfRange(lastW, 1, lastW.length+1);
        rotWord[rotWord.length-1] = lastW[0];
        return rotWord;
    }

    private static int[] roundConstant(int idx) { 
        return new int[]{new int[]{1, 2, 4, 8, 16, 32, 64, 128, 27, 54}[idx], 0, 0, 0};
    }

    private static int[] xorWords(int[] w1, int[] w2) {
        int[] result = new int[w1.length];
        IntStream.range(0, w1.length).forEach(x -> result[x] = w1[x] ^ w2[x]);
        return result;
    }

    private static int[][] subBytes(int[][] matrix) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                matrix[j][i] = S_BOX[matrix[j][i] >> 4][matrix[j][i] & ((1 << 4) - 1)];
            }
        }
        return matrix;
    }

    private static int[][] shiftRows(int[][] matrix) {
        return new int[][]{
            {matrix[0][0], matrix[0][1], matrix[0][2], matrix[0][3]},
            {matrix[1][1], matrix[1][2], matrix[1][3], matrix[1][0]},
            {matrix[2][2], matrix[2][3], matrix[2][0], matrix[2][1]},       
            {matrix[3][3], matrix[3][0], matrix[3][1], matrix[3][2]}   
        };
    }

    private static final int[][] S_BOX = {
        {0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76},
        {0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0},
        {0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15},
        {0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75},
        {0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84},
        {0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF},
        {0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8},
        {0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2},
        {0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73},
        {0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB},
        {0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79},
        {0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08},
        {0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A},
        {0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E},
        {0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF},
        {0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16}
    };

    private static final int[][] E_TABLE = new int[][]{
        {0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35},
        {0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa},
        {0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31},
        {0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd},
        {0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88},
        {0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a},
        {0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3},
        {0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0},
        {0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41},
        {0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75},
        {0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80},
        {0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54},
        {0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca},
        {0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e},
        {0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17},
        {0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6, 0x01}
    };

    private static final int[][] L_TABLE = new int[][]{
        {0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03},
        {0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1},
        {0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78},
        {0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e},
        {0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38},
        {0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10},
        {0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba},
        {0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57},
        {0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8},
        {0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0},
        {0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7},
        {0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d},
        {0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1},
        {0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab},
        {0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5},
        {0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07}
    };
}